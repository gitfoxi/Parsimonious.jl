Cache works the same as LPEG?

Really untangle the escaping issue so you can give good instructions on how to
make a literal doublequote and a literal backslash.

Make sure I get the same number of cache hits as Python

Parallel?

Make fulltext a member of all NodeVisitor (and maybe Expression?) so you don't
have to keep passing it to visit()

Finish tuple conversion of Node and calls from Expression

LPEG-like declaritive interface

Benchmark against: Parsley, LPEG, PEG.js

Clean style like `base/pkg`

Fixed-length, range-length match

Streaming

Capture #9000000004asdf

Slices take as much memeory as strings (actually a little more). And derp, they
probably copy the fucker. If this improves using a slice for a node instead of
a start/end position would be convenient. There's even a "slice" function but
it doesn't work on strings.

Tracing the parser -- match/no-match messages alligned with the text plus time
and memeory allocation. 

Make a simplified model of recursive matching to quickly implement in several
languages.


Benchmark
---------

I'm about 3x slower than Parsimonious and can make that up by half, disabling
garbage collection.

Casually, Parsley seems to be 100x slower than Parsimonious. Wow!

Not even playing the same ballgame as simplejson or ultrajson.

TODO: LPEG, CEG, PEG.js

TODO: More microbenchmarks like test_benchmarks.py


Stupid Ideas
------------

OnOf optimization -- when you match, if it's not the first option then swap it
with the next earlier option in the order This way, a more frequently matched
option will be checked first.  Of course, this is stupid because in PEG it does
matter what order things match in. Derp


Suggestions for Benchmark.jl
----------------------------

* mean is more interesting than average * need to make sure compiler can't
optimize you our by providing random data and using the result (print to
/dev/null)


Suggestions for Profiling
-------------------------

* Sort by height (depth?) from bottom (top?) of stack


Suggestions for Julia
---------------------

Arbitrary quotes like Perl

Tail-call optimization.

String slicing.

Tighter allocations for small objects.
